import java.util.*;

class Solution {
    public long minimumDifference(int[] nums) {
        int n = nums.length / 3;
        long[] prefixSum = new long[nums.length];
        long[] suffixSum = new long[nums.length];
        
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        long sum = 0;
        for (int i = 0; i < 2 * n; i++) {
            sum += nums[i];
            maxHeap.add(nums[i]);
            if (maxHeap.size() > n) {
                sum -= maxHeap.poll();
            }
            if (maxHeap.size() == n) {
                prefixSum[i] = sum;
            } else {
                prefixSum[i] = Long.MAX_VALUE;
            }
        }

        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        sum = 0;
        for (int i = nums.length - 1; i >= n; i--) {
            sum += nums[i];
            minHeap.add(nums[i]);
            if (minHeap.size() > n) {
                sum -= minHeap.poll();
            }
            if (minHeap.size() == n) {
                suffixSum[i] = sum;
            } else {
                suffixSum[i] = Long.MIN_VALUE;
            }
        }

        long result = Long.MAX_VALUE;
        for (int i = n - 1; i < 2 * n; i++) {
            result = Math.min(result, prefixSum[i] - suffixSum[i + 1]);
        }

        return result;
    }
}
